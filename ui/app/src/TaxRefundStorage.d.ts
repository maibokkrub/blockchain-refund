/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TaxRefundStorageInterface extends ethers.utils.Interface {
  functions: {
    "admins(address)": FunctionFragment;
    "cancelOrder(address,bytes16)": FunctionFragment;
    "confirmOrder(address,bytes16)": FunctionFragment;
    "createAdmin(address,string)": FunctionFragment;
    "createOrder(address,string,uint256,uint256)": FunctionFragment;
    "createShop(address,string,string)": FunctionFragment;
    "getAllOrdersByBuyer(address)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isShop(address)": FunctionFragment;
    "orders(bytes16)": FunctionFragment;
    "owner()": FunctionFragment;
    "refund(bytes16[],string,address)": FunctionFragment;
    "refundAddress(string)": FunctionFragment;
    "rejectOrder(address,bytes16)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRefundAddress(string,address)": FunctionFragment;
    "shops(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmOrder",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createShop",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOrdersByBuyer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "isShop", values: [string]): string;
  encodeFunctionData(functionFragment: "orders", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BytesLike[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refundAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectOrder",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "shops", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createShop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllOrdersByBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isShop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class TaxRefundStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TaxRefundStorageInterface;

  functions: {
    admins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { isAdmin: boolean; country: string }>;

    cancelOrder(
      buyer: string,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmOrder(
      buyer: string,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAdmin(
      addr: string,
      _country: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOrder(
      buyer: string,
      name: string,
      price: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createShop(
      addr: string,
      _name: string,
      _country: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllOrdersByBuyer(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          string,
          [string, string, string, boolean] & {
            shopAddr: string;
            shopName: string;
            country: string;
            exists: boolean;
          }
        ] & {
          id: string;
          name: string;
          price: BigNumber;
          amount: BigNumber;
          state: number;
          buyer: string;
          shop: [string, string, string, boolean] & {
            shopAddr: string;
            shopName: string;
            country: string;
            exists: boolean;
          };
        })[]
      ]
    >;

    isAdmin(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isShop(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    orders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        [string, string, string, boolean] & {
          shopAddr: string;
          shopName: string;
          country: string;
          exists: boolean;
        }
      ] & {
        id: string;
        name: string;
        price: BigNumber;
        amount: BigNumber;
        state: number;
        buyer: string;
        shop: [string, string, string, boolean] & {
          shopAddr: string;
          shopName: string;
          country: string;
          exists: boolean;
        };
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    refund(
      _orderIds: BytesLike[],
      countyCode: string,
      buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refundAddress(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    rejectOrder(
      buyer: string,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRefundAddress(
      countryCode: string,
      _refundAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shops(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean] & {
        shopAddr: string;
        shopName: string;
        country: string;
        exists: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admins(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { isAdmin: boolean; country: string }>;

  cancelOrder(
    buyer: string,
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmOrder(
    buyer: string,
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAdmin(
    addr: string,
    _country: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOrder(
    buyer: string,
    name: string,
    price: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createShop(
    addr: string,
    _name: string,
    _country: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllOrdersByBuyer(
    buyer: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      string,
      [string, string, string, boolean] & {
        shopAddr: string;
        shopName: string;
        country: string;
        exists: boolean;
      }
    ] & {
      id: string;
      name: string;
      price: BigNumber;
      amount: BigNumber;
      state: number;
      buyer: string;
      shop: [string, string, string, boolean] & {
        shopAddr: string;
        shopName: string;
        country: string;
        exists: boolean;
      };
    })[]
  >;

  isAdmin(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isShop(addr: string, overrides?: CallOverrides): Promise<boolean>;

  orders(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      string,
      [string, string, string, boolean] & {
        shopAddr: string;
        shopName: string;
        country: string;
        exists: boolean;
      }
    ] & {
      id: string;
      name: string;
      price: BigNumber;
      amount: BigNumber;
      state: number;
      buyer: string;
      shop: [string, string, string, boolean] & {
        shopAddr: string;
        shopName: string;
        country: string;
        exists: boolean;
      };
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  refund(
    _orderIds: BytesLike[],
    countyCode: string,
    buyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refundAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  rejectOrder(
    buyer: string,
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRefundAddress(
    countryCode: string,
    _refundAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shops(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean] & {
      shopAddr: string;
      shopName: string;
      country: string;
      exists: boolean;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { isAdmin: boolean; country: string }>;

    cancelOrder(
      buyer: string,
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    confirmOrder(
      buyer: string,
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createAdmin(
      addr: string,
      _country: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrder(
      buyer: string,
      name: string,
      price: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createShop(
      addr: string,
      _name: string,
      _country: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllOrdersByBuyer(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        [string, string, string, boolean] & {
          shopAddr: string;
          shopName: string;
          country: string;
          exists: boolean;
        }
      ] & {
        id: string;
        name: string;
        price: BigNumber;
        amount: BigNumber;
        state: number;
        buyer: string;
        shop: [string, string, string, boolean] & {
          shopAddr: string;
          shopName: string;
          country: string;
          exists: boolean;
        };
      })[]
    >;

    isAdmin(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isShop(addr: string, overrides?: CallOverrides): Promise<boolean>;

    orders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        [string, string, string, boolean] & {
          shopAddr: string;
          shopName: string;
          country: string;
          exists: boolean;
        }
      ] & {
        id: string;
        name: string;
        price: BigNumber;
        amount: BigNumber;
        state: number;
        buyer: string;
        shop: [string, string, string, boolean] & {
          shopAddr: string;
          shopName: string;
          country: string;
          exists: boolean;
        };
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    refund(
      _orderIds: BytesLike[],
      countyCode: string,
      buyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    refundAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

    rejectOrder(
      buyer: string,
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setRefundAddress(
      countryCode: string,
      _refundAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shops(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean] & {
        shopAddr: string;
        shopName: string;
        country: string;
        exists: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    admins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      buyer: string,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmOrder(
      buyer: string,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAdmin(
      addr: string,
      _country: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOrder(
      buyer: string,
      name: string,
      price: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createShop(
      addr: string,
      _name: string,
      _country: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllOrdersByBuyer(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isShop(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    orders(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      _orderIds: BytesLike[],
      countyCode: string,
      buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refundAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rejectOrder(
      buyer: string,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRefundAddress(
      countryCode: string,
      _refundAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shops(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      buyer: string,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmOrder(
      buyer: string,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAdmin(
      addr: string,
      _country: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOrder(
      buyer: string,
      name: string,
      price: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createShop(
      addr: string,
      _name: string,
      _country: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllOrdersByBuyer(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isShop(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      _orderIds: BytesLike[],
      countyCode: string,
      buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refundAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectOrder(
      buyer: string,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRefundAddress(
      countryCode: string,
      _refundAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shops(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
